(begin-tx)
(env-data
  { 'ns-admin-keyset: []
  , 'ns-genesis-keyset:[]
  , 'ns-operate-keyset:[] })
(load "root/fungible-v2.pact")
(load "root/coin.pact")
(load "root/ns.pact")

(define-namespace 'kip (sig-keyset) (sig-keyset))

(load "kip/account-protocols-v1.pact")
(load "kip/manifest.pact")
(load "kip/poly-fungible-v2.pact")
(load "kip/token-policy-v1.pact")

(define-namespace 'util (sig-keyset) (sig-keyset))
(load "util/fungible-util.pact")

(define-namespace 'marmalade (sig-keyset) (sig-keyset))
(env-data
 { 'marmalade-admin: ["marmalade-admin"]
 , 'ns: "marmalade"
 , 'upgrade: false })
(env-keys ['marmalade-admin])
(define-keyset 'marmalade-admin)
(load "marmalade/ledger.pact")

(commit-tx)


(begin-tx)
(env-data
 { 'ir-admin: ["ir-admin"]
 , 'ns: "ir"
 , 'upgrade: false
})
(env-keys ['ir-admin])
(load "ns-ir.pact")
(load "ir-policy.pact")
(commit-tx)

;;
;; create-token tests
;;

(begin-tx "create-token tests")
(env-hash (hash "ir-policy-tx1"))
(use ir.policy)
(use kip.token-manifest)
(use marmalade.ledger)

(env-sigs [{'key: 'other, 'caps: [(CREATE_TOKEN "ir-token-1")]}])

(expect-failure "Create token without ir-admin fails"
  "Keyset failure"
  (create-token "ir-token-1"
    1 (create-manifest (uri "text" "ir-token-1") []) ir.policy))

(env-sigs [{'key: 'ir-admin,
  'caps: [(CREATE_TOKEN "ir-token-1")]}])

(env-data { 'weight: 0.1 })

(expect-failure "Create token with weight < 1.0 fails"
  "Invalid weight"
  (create-token "ir-token-1"
    1 (create-manifest (uri "text" "ir-token-1") []) ir.policy))

(env-data { 'weight: 1.0 })

(expect-failure "Create token with precision != 1 fails"
  "Invalid precision"
  (create-token "ir-token-1"
    3 (create-manifest (uri "text" "ir-token-1") []) ir.policy))

(expect-failure "enforce-init direct call fails"
  "Keyset failure"
  (enforce-init
    { 'id: "ir-token-1"
    ,'supply: 1.0
    ,'precision: 1
    ,'manifest: (create-manifest (uri "text" "ir-token-1") [])}))

(expect "Create token 1 succeeds"
  "Write succeeded"
  (create-token "ir-token-1"
    0 (create-manifest (uri "text" "ir-token-1") []) ir.policy))

(expect "create token 1 events"
  [{"name": "marmalade.ledger.TOKEN","params": ["ir-token-1"]}]
  (map (remove 'module-hash) (env-events true)))

(env-sigs [{'key: 'ir-admin,
  'caps: [(CREATE_TOKEN "ir-token-2")]}])

(env-data { 'weight: 2.0 })

(expect "Create token 2 succeeds"
  "Write succeeded"
  (create-token "ir-token-2"
    0 (create-manifest (uri "text" "ir-token-2") []) ir.policy))

(expect "create token 2 events"
  [{"name": "marmalade.ledger.TOKEN","params": ["ir-token-2"]}]
  (map (remove 'module-hash) (env-events true)))

(env-sigs [{'key: 'ir-admin,
  'caps: [(CREATE_TOKEN "ir-token-3")]}])

(env-data { 'weight: 4.0 })

(expect "Create token 3 succeeds"
  "Write succeeded"
  (create-token "ir-token-3"
    0 (create-manifest (uri "text" "ir-token-3") []) ir.policy))

(expect "create token 3 events"
  [{"name": "marmalade.ledger.TOKEN","params": ["ir-token-3"]}]
  (map (remove 'module-hash) (env-events true)))

(commit-tx)

;;
;; mint token 1
;;

(begin-tx "mint token 1")
(use ir.policy)
(use marmalade.ledger)

(env-sigs
  [{'key:'other
   ,'caps:
    [(marmalade.ledger.MINT "ir-token-1" "mint-acct-1" 1.0)
     ]}])

(env-data
 { 'owner-keyset: ["mint-acct-1"]
})

(expect-failure "mint without admin key fails"
  "Keyset failure"
  (mint "ir-token-1" "mint-acct-1" (read-keyset 'owner-keyset) 1.0))

(env-sigs
  [{'key:'ir-admin
   ,'caps:
    [(marmalade.ledger.MINT "ir-token-1" "mint-acct-1" 1.1)
     (marmalade.ledger.MINT "ir-token-1" "mint-acct-1" 1.0)
     (marmalade.ledger.MINT "ir-token-1" "mint-acct-1-1" 1.0)
     ]}])

(expect-failure "mint fails with amount != 1.0"
  "enforce 1-off amount"
  (mint "ir-token-1" "mint-acct-1" (read-keyset 'owner-keyset) 1.1))

(expect "mint succeeds with blank coin owner"
  "Write succeeded"
  (mint "ir-token-1" "mint-acct-1" (read-keyset 'owner-keyset) 1.0))

(expect "mint account is created and debited 1.0"
  1.0
  (marmalade.ledger.get-balance 'ir-token-1 'mint-acct-1))

(expect-failure "mint fails at second try"
  "enforce 1-off supply"
  (mint "ir-token-1" "mint-acct-1-1" (read-keyset 'owner-keyset) 1.0))

(expect-failure "mint account not debited"
  "row not found: ir-token-1:mint-acct-1-1"
  (marmalade.ledger.get-balance 'ir-token-1 'mint-acct-1-1))

(commit-tx)


;;
;; sale token 1
;;

(begin-tx "sale token 1")
(env-hash (hash "sale-token-1"))
(use ir.policy)
(use marmalade.ledger)

(env-data
  { 'recipient: "mint-acct-1"
  , 'recipient-guard: ["mint-acct-1"]
  , 'buyer: "buyer-acct-1-1"
  , 'buyer-guard: ["buyer-acct-1-1"] })

(coin.create-account (read-msg "recipient") (read-keyset 'recipient-guard))
(test-capability (coin.COINBASE))
(coin.coinbase (read-msg "buyer") (read-keyset 'buyer-guard) 100.0)

(env-data
  { 'quote: {
      'price: 100.0
    , 'recipient: "mint-acct-1"
    , 'recipient-guard: {'keys: ["mint-acct-1"], 'pred: 'keys-all}
    }})

(env-sigs [
  { 'key: 'mint-acct-1
  , 'caps: [(marmalade.ledger.OFFER "ir-token-1" "mint-acct-1" 1.0 200)]
  }])

(expect "offer succeeds"
  true
  (sale "ir-token-1" "mint-acct-1" 1.0 200))


(expect "offer events"
  [{"name": "marmalade.ledger.OFFER","params": ["ir-token-1" "mint-acct-1" 1.0 200]}
   {"name": "marmalade.ledger.SALE","params": ["ir-token-1" "mint-acct-1" 1.0 200 (hash "sale-token-1")]}
   {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-1" "mint-acct-1" (sale-account) 1.0]}
  ]
  (map (remove 'module-hash) (env-events true)))

(env-data
  { 'buyer: "buyer-acct-1-1"
  , 'buyer-guard: {'keys: ["buyer-acct-1-1"], 'pred: 'keys-all}
  }
)

(env-sigs [
  {'key: 'buyer-acct-1-1
  ,'caps: [
     (marmalade.ledger.BUY "ir-token-1" "mint-acct-1" "buyer-acct-1-1" 1.0 200 (hash "sale-token-1"))
    ,(coin.TRANSFER "buyer-acct-1-1" "mint-acct-1" 100.0) ]
  }])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "seller account is debited"
  0.0
  (marmalade.ledger.get-balance "ir-token-1" "mint-acct-1"))

(expect "buyer account is credited"
  1.0
  (marmalade.ledger.get-balance "ir-token-1" "buyer-acct-1-1"))

(expect "buyer coin account is debited, seller coin account is credited"
  [0.0 100.0]
  (map (coin.get-balance)["buyer-acct-1-1" "mint-acct-1"]))

(expect "buy events"
  [ {"name": "marmalade.ledger.BUY","params": ["ir-token-1" "mint-acct-1" "buyer-acct-1-1" 1.0 200 (hash "sale-token-1")]}
    {"name": "ir.policy.UPDATE_OWNER","params": ["ir-token-1" "buyer-acct-1-1"]}
    {"name": "coin.TRANSFER","params": ["buyer-acct-1-1" "mint-acct-1" 100.0]}
    {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-1" (sale-account) "buyer-acct-1-1" 1.0]}]
    (map (remove 'module-hash) (env-events true)))

(commit-tx)

;;
;; sale token 1 again
;;

(begin-tx "sale token 1-1")
(env-hash (hash "sale-token-1-1"))
(use ir.policy)
(use marmalade.ledger)

(env-data
  { 'buyer: "buyer-acct-1-2"
  , 'buyer-guard: ["buyer-acct-1-2"] })

;; 100 KDA funded to buyer-acct-1-2
(test-capability (coin.COINBASE))
(coin.coinbase (read-msg 'buyer) (read-keyset 'buyer-guard) 100.0)

(env-data
  { 'quote: {
      'price: 100.0
    , 'recipient: "buyer-acct-1-1"
    , 'recipient-guard: {'keys: ["buyer-acct-1-1"], 'pred: 'keys-all}
    }})

(env-sigs [
  { 'key: 'buyer-acct-1-1
  , 'caps: [(marmalade.ledger.OFFER "ir-token-1" "buyer-acct-1-1" 1.0 200)]
  }])

(expect "offer succeeds"
  true
  (sale "ir-token-1" "buyer-acct-1-1" 1.0 200))

(expect "offer events"
  [{"name": "marmalade.ledger.OFFER","params": ["ir-token-1" "buyer-acct-1-1" 1.0 200]}
  {"name": "marmalade.ledger.SALE","params": ["ir-token-1" "buyer-acct-1-1" 1.0 200 (hash "sale-token-1-1")]}
  {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-1" "buyer-acct-1-1" (sale-account) 1.0]}
  ]
  (map (remove 'module-hash) (env-events true)))

(env-data
  { 'buyer: "buyer-acct-1-2"
  , 'buyer-guard: {'keys: ["buyer-acct-1-2"], 'pred: 'keys-all}
  }
)

(env-sigs [
  {'key: 'buyer-acct-1-2
  ,'caps: [
     (marmalade.ledger.BUY "ir-token-1" "buyer-acct-1-1" "buyer-acct-1-2" 1.0 200 (hash "sale-token-1-1"))
    ,(coin.TRANSFER "buyer-acct-1-2" "buyer-acct-1-1" 100.0) ]
  }])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "seller account is debited"
  0.0
  (marmalade.ledger.get-balance "ir-token-1" "buyer-acct-1-1"))

(expect "buyer account is credited"
  1.0
  (marmalade.ledger.get-balance "ir-token-1" "buyer-acct-1-2"))

(expect "buyer coin account is debited 100%, seller coin account is credited 100%"
  [0.0 100.0]
  (map (coin.get-balance)["buyer-acct-1-2" "buyer-acct-1-1"]))

(expect "buy events"
  [ {"name": "marmalade.ledger.BUY","params": ["ir-token-1" "buyer-acct-1-1" "buyer-acct-1-2" 1.0 200 (hash "sale-token-1-1")]}
    {"name": "ir.policy.UPDATE_OWNER","params": ["ir-token-1" "buyer-acct-1-2"]}
    {"name": "coin.TRANSFER","params": ["buyer-acct-1-2" "buyer-acct-1-1" 100.0]}
    {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-1" (sale-account) "buyer-acct-1-2" 1.0]}]
    (map (remove 'module-hash) (env-events true)))

(commit-tx)

;;
;; mint token 2
;;

(begin-tx "mint token 2")
(use ir.policy)
(use marmalade.ledger)

(env-data
 { 'owner-keyset: ["mint-acct-2"]
})

(env-sigs
  [{'key:'ir-admin
   ,'caps: [
     (marmalade.ledger.MINT "ir-token-2" "mint-acct-2" 1.0)
     ]}])

(expect "mint succeeds with blank coin owner"
  "Write succeeded"
  (mint "ir-token-2" "mint-acct-2" (read-keyset 'owner-keyset) 1.0))

(commit-tx)


;;
;; sale token 2
;;

(begin-tx "sale token 2")
(env-hash (hash "sale-token-2"))
(use ir.policy)
(use marmalade.ledger)


(env-data
  { 'recipient: "mint-acct-2"
  , 'recipient-guard: ["mint-acct-2"]
  , 'buyer: "buyer-acct-2-1"
  , 'buyer-guard: ["buyer-acct-2-1"] })

(coin.create-account (read-msg "recipient") (read-keyset 'recipient-guard))
(test-capability (coin.COINBASE))
(coin.coinbase (read-msg "buyer") (read-keyset 'buyer-guard) 100.0)

(env-data
  { 'quote: {
      'price: 100.0
    , 'recipient: "mint-acct-2"
    , 'recipient-guard: {'keys: ["mint-acct-2"], 'pred: 'keys-all}
    }})

(env-sigs [
  { 'key: 'mint-acct-2
  , 'caps: [(marmalade.ledger.OFFER "ir-token-2" "mint-acct-2" 1.0 200)]
  }])

(expect "offer succeeds"
  true
  (sale "ir-token-2" "mint-acct-2" 1.0 200))


(expect "offer events"
  [{"name": "marmalade.ledger.OFFER","params": ["ir-token-2" "mint-acct-2" 1.0 200]}
   {"name": "marmalade.ledger.SALE","params": ["ir-token-2" "mint-acct-2" 1.0 200 (hash "sale-token-2")]}
   {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-2" "mint-acct-2" (sale-account) 1.0]}
  ]
  (map (remove 'module-hash) (env-events true)))


(env-data
  { 'buyer: "buyer-acct-2-1"
  , 'buyer-guard: {'keys: ["buyer-acct-2-1"], 'pred: 'keys-all}
  }
)
(env-sigs [
  {'key: 'buyer-acct-2-1
  ,'caps: [
     (marmalade.ledger.BUY "ir-token-2" "mint-acct-2" "buyer-acct-2-1" 1.0 200 (hash "sale-token-2"))
    ,(coin.TRANSFER "buyer-acct-2-1" "mint-acct-2" 90.0)
    ,(coin.TRANSFER "buyer-acct-2-1" "buyer-acct-1-2" 10.0) ]
  }])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "seller account is debited"
  0.0
  (marmalade.ledger.get-balance "ir-token-2" "mint-acct-2"))

(expect "buyer account is credited"
  1.0
  (marmalade.ledger.get-balance "ir-token-2" "buyer-acct-2-1"))

(expect "buyer coin account is debited 100%, seller coin account is credited 90%, owner coin account is debited 10%"
  [0.0 90.0 10.0]
  (map (coin.get-balance) ["buyer-acct-2-1" "mint-acct-2" "buyer-acct-1-2"]))

(expect "buy events"
  [ {"name": "marmalade.ledger.BUY","params": ["ir-token-2" "mint-acct-2" "buyer-acct-2-1" 1.0 200 (hash "sale-token-2")]}
    {"name": "coin.TRANSFER","params": ["buyer-acct-2-1" "buyer-acct-1-2" 10.0]}
    {"name": "ir.policy.UPDATE_OWNER","params": ["ir-token-2" "buyer-acct-2-1"]}
    {"name": "coin.TRANSFER","params": ["buyer-acct-2-1" "mint-acct-2" 90.0]}
    {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-2" (sale-account) "buyer-acct-2-1" 1.0]}]
    (map (remove 'module-hash) (env-events true)))

(commit-tx)



;;
;; mint token 3
;;

(begin-tx "mint token 3")
(use ir.policy)
(use marmalade.ledger)

(env-data
 { 'owner: 'mint-acct-3
  ,'owner-keyset: ["mint-acct-3"]
})

(env-sigs
  [{'key:'ir-admin
   ,'caps: [
     (marmalade.ledger.MINT "ir-token-3" "mint-acct-3" 1.0)
     ]}])

(expect-failure "mint fails without existing mint-acct-3 coin account"
  "with-read: row not found: mint-acct-3"
  (mint "ir-token-3" "mint-acct-3" (read-keyset 'owner-keyset) 1.0))

(coin.create-account (read-msg 'owner) (read-keyset 'owner-keyset))

(expect "mint succeeds with mint-acct-3 coin account"
  "Write succeeded"
  (mint "ir-token-3" "mint-acct-3" (read-keyset 'owner-keyset) 1.0))

(expect "mint events"
  [ {"name": "marmalade.ledger.MINT","params": ["ir-token-3" "mint-acct-3" 1.0]}
    {"name": "ir.policy.UPDATE_OWNER","params": ["ir-token-3" "mint-acct-3"]}
    {"name": "marmalade.ledger.SUPPLY","params": ["ir-token-3" 1.0]}
  ]
  (map (remove 'module-hash) (env-events true)))

(commit-tx)

;;
;; sale token 2 again
;;

(begin-tx "sale token 2 again")
(env-hash (hash "sale-token-2-1"))
(use ir.policy)
(use marmalade.ledger)

(env-data
  { 'buyer: "buyer-acct-2-2"
  , 'buyer-guard: ["buyer-acct-2-2"] })

(test-capability (coin.COINBASE))
(coin.coinbase (read-msg "buyer") (read-keyset 'buyer-guard) 100.0)


(env-data
  { 'quote: {
      'price: 100.0
    , 'recipient: "buyer-acct-2-1"
    , 'recipient-guard: {'keys: ["buyer-acct-2-1"], 'pred: 'keys-all}
    }})

(env-sigs [
  { 'key: 'buyer-acct-2-1
  , 'caps: [(marmalade.ledger.OFFER "ir-token-2" "buyer-acct-2-1" 1.0 200)]
  }])

(expect "offer succeeds"
  true
  (sale "ir-token-2" "buyer-acct-2-1" 1.0 200))


(expect "offer events"
 [ {"name": "marmalade.ledger.OFFER","params": ["ir-token-2" "buyer-acct-2-1" 1.0 200]}
   {"name": "marmalade.ledger.SALE","params": ["ir-token-2" "buyer-acct-2-1" 1.0 200 (hash "sale-token-2-1")]}
   {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-2" "buyer-acct-2-1" (sale-account) 1.0]}
 ]
  (map (remove 'module-hash) (env-events true)))


(env-data
  { 'buyer: "buyer-acct-2-2"
  , 'buyer-guard: {'keys: ["buyer-acct-2-2"], 'pred: 'keys-all}
  }
)
(env-sigs [
  {'key: 'buyer-acct-2-2
  ,'caps: [
     (marmalade.ledger.BUY "ir-token-2" "buyer-acct-2-1" "buyer-acct-2-2" 1.0 200 (hash "sale-token-2-1"))
    ,(coin.TRANSFER "buyer-acct-2-2" "mint-acct-3" 8.0)
    ,(coin.TRANSFER "buyer-acct-2-2" "buyer-acct-2-1" 90.0)
    ,(coin.TRANSFER "buyer-acct-2-2" "buyer-acct-1-2" 2.0)
     ]
  }])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "seller account is debited"
  0.0
  (marmalade.ledger.get-balance "ir-token-2" "buyer-acct-2-1"))

(expect "buyer account is credited"
  1.0
  (marmalade.ledger.get-balance "ir-token-2" "buyer-acct-2-2"))

(expect "buyer coin account is debited 100%, seller coin account is credited 90%, ir-token-1 owner is credited 2%, ir-token-3 owner is credited 8%"
  [0.0 90.0 12.0 8.0]
  (map (coin.get-balance) ["buyer-acct-2-2" "buyer-acct-2-1" "buyer-acct-1-2" "mint-acct-3"]))

(expect "buy events"
  [ {"name": "marmalade.ledger.BUY","params": ["ir-token-2" "buyer-acct-2-1" "buyer-acct-2-2" 1.0 200 (hash "sale-token-2-1")]}
  {"name": "coin.TRANSFER","params": ["buyer-acct-2-2" "buyer-acct-1-2" 2.0]}
  {"name": "coin.TRANSFER","params": ["buyer-acct-2-2" "mint-acct-3" 8.0]}
  {"name": "ir.policy.UPDATE_OWNER","params": ["ir-token-2" "buyer-acct-2-2"]}
  {"name": "coin.TRANSFER","params": ["buyer-acct-2-2" "buyer-acct-2-1" 90.0]}
  {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-2" (sale-account) "buyer-acct-2-2" 1.0]}
  ]
  (map (remove 'module-hash) (env-events true)))

(commit-tx)


;;
;; sale token 3
;;

(begin-tx "sale token 3")
(env-hash (hash "sale-token-3"))
(use ir.policy)
(use marmalade.ledger)


(env-data
  { 'buyer: "buyer-acct-3-1"
  , 'buyer-guard: ["buyer-acct-3-1"] })

(test-capability (coin.COINBASE))
(coin.coinbase (read-msg "buyer") (read-keyset 'buyer-guard) 100.0)

(env-data
  { 'quote: {
      'price: 100.0
    , 'recipient: "mint-acct-3"
    , 'recipient-guard: {'keys: ["mint-acct-3"], 'pred: 'keys-all}
    }})

(env-sigs [
  { 'key: 'mint-acct-3
  , 'caps: [(marmalade.ledger.OFFER "ir-token-3" "mint-acct-3" 1.0 200)]
  }])

(expect "offer succeeds"
  true
  (sale "ir-token-3" "mint-acct-3" 1.0 200))


(expect "offer events"
 [ {"name": "marmalade.ledger.OFFER","params": ["ir-token-3" "mint-acct-3" 1.0 200]}
   {"name": "marmalade.ledger.SALE","params": ["ir-token-3" "mint-acct-3" 1.0 200 (hash "sale-token-3")]}
   {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-3" "mint-acct-3" (sale-account) 1.0]}
 ]
  (map (remove 'module-hash) (env-events true)))


(env-data
  { 'buyer: "buyer-acct-3-1"
  , 'buyer-guard: {'keys: ["buyer-acct-3-1"], 'pred: 'keys-all}
  }
)

(env-sigs [
  {'key: 'buyer-acct-3-1
  ,'caps: [
     (marmalade.ledger.BUY "ir-token-3" "mint-acct-3" "buyer-acct-3-1" 1.0 200 (hash "sale-token-3"))
     ,(coin.TRANSFER "buyer-acct-3-1" "buyer-acct-1-2" 3.333333333333)
     ,(coin.TRANSFER "buyer-acct-3-1" "buyer-acct-2-2" 6.666666666666)
     ,(coin.TRANSFER "buyer-acct-3-1" "mint-acct-3" 90.0)
     ]
  }])

(expect "buy succeeds"
  true
  (continue-pact 1))

(expect "seller account is debited"
  0.0
  (marmalade.ledger.get-balance "ir-token-3" "mint-acct-3"))

(expect "buyer account is credited"
  1.0
  (marmalade.ledger.get-balance "ir-token-3" "buyer-acct-3-1"))

;; Flooring resulted in 1e-12 coin balance in buyer account
(expect "buyer coin account is debited 99.99..%, seller coin account is credited 90%, ir-token-1 owner is credited 3.33..%, ir-token-2 owner is credited 6.66..%"
  [0.000000000001 98.0 15.333333333333 6.666666666666]
  (map (coin.get-balance) ["buyer-acct-3-1" "mint-acct-3" "buyer-acct-1-2" "buyer-acct-2-2"]))

(expect "buy events"
  [ {"name": "marmalade.ledger.BUY","params": ["ir-token-3" "mint-acct-3" "buyer-acct-3-1" 1.0 200 (hash "sale-token-3")]}
    {"name": "coin.TRANSFER","params": ["buyer-acct-3-1" "buyer-acct-1-2" 3.333333333333]}
    {"name": "coin.TRANSFER","params": ["buyer-acct-3-1" "buyer-acct-2-2" 6.666666666666]}
    {"name": "ir.policy.UPDATE_OWNER","params": ["ir-token-3" "buyer-acct-3-1"]}
    {"name": "coin.TRANSFER","params": ["buyer-acct-3-1" "mint-acct-3" 90.0]}
    {"name": "marmalade.ledger.TRANSFER","params": ["ir-token-3" (sale-account) "buyer-acct-3-1" 1.0]}
  ]
  (map (remove 'module-hash) (env-events true)))

(commit-tx)

(env-data {
  "mint-acct-1": ["mint-acct-1"]
 ,"mint-acct-2": ["mint-acct-2"]
 ,"mint-acct-3": ["mint-acct-3"]
 ,"buyer-acct-2-1": ["buyer-acct-2-1"]
 ,"buyer-acct-1-1": ["buyer-acct-1-1"]
})

;;table queries test
(expect "Get sale history of ir tokens"
  [{ "sale-id": (hash "sale-token-1")
     ,"quote": {
       "id": "ir-token-1",
       "spec": {
         "price": 100.0
        ,"recipient": "mint-acct-1"
        ,"recipient-guard": (read-keyset 'mint-acct-1) }}}
   { "sale-id": (hash "sale-token-2-1")
    ,"quote": {
       "id": "ir-token-2"
      ,"spec": {
         "price": 100.0
        ,"recipient": "buyer-acct-2-1"
        ,"recipient-guard": (read-keyset 'buyer-acct-2-1) }}}
   { "sale-id": (hash "sale-token-3")
    ,"quote": {
       "id": "ir-token-3"
      ,"spec": {
         "price": 100.0
        ,"recipient": "mint-acct-3"
        ,"recipient-guard": (read-keyset 'mint-acct-3) }}}
   { "sale-id": (hash "sale-token-1-1")
    ,"quote": {
       "id": "ir-token-1"
      ,"spec": {
         "price": 100.0
        ,"recipient": "buyer-acct-1-1"
       ,"recipient-guard": (read-keyset 'buyer-acct-1-1) }}}
  { "sale-id": (hash "sale-token-2")
   ,"quote": {
      "id": "ir-token-2"
     ,"spec": {
        "price": 100.0
       ,"recipient": "mint-acct-2"
       ,"recipient-guard": (read-keyset 'mint-acct-2) }}}]
  (ir.policy.get-quotes))

(expect "Get current owner and the weight of all ir tokens"
  [{ "id": "ir-token-1"
    ,"owner": "buyer-acct-1-2"
    ,"weight": 1
   }
   { "id": "ir-token-2"
    ,"owner": "buyer-acct-2-2"
    ,"weight": 2
   }
   {"id": "ir-token-3"
   ,"owner": "buyer-acct-3-1"
   ,"weight": 4
   }]
  (ir.policy.get-ir-tokens)
)
